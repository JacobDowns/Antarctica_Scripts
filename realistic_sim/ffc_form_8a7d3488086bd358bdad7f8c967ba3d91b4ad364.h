// This code conforms with the UFC specification version 1.4.0
// and was automatically generated by FFC version 1.4.0.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   log_level:                      25
//   log_prefix:                     ''
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              2
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_8A7D3488086BD358BDAD7F8C967BA3D91B4AD364_H
#define __FFC_FORM_8A7D3488086BD358BDAD7F8C967BA3D91B4AD364_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 4;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (2,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::tetrahedron;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 8;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[9]  + vertex_coordinates[6] + vertex_coordinates[3]  - vertex_coordinates[0];
    const double C1 = vertex_coordinates[10] + vertex_coordinates[7] + vertex_coordinates[4]  - vertex_coordinates[1];
    const double C2 = vertex_coordinates[11] + vertex_coordinates[8] + vertex_coordinates[5]  - vertex_coordinates[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    _evaluate_basis(i, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 8; r++)
    {
      _evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation)
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
    _evaluate_basis_derivatives(i, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (actual implementation)
  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 8; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[6];
    for (unsigned int r = 0; r < 6; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 8; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell (non-static member function)
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    _evaluate_basis_derivatives_all(n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      y[2] = vertex_coordinates[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = vertex_coordinates[3];
      y[1] = vertex_coordinates[4];
      y[2] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[6];
      y[1] = vertex_coordinates[7];
      y[2] = vertex_coordinates[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[9];
      y[1] = vertex_coordinates[10];
      y[2] = vertex_coordinates[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    y[2] = vertex_coordinates[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = vertex_coordinates[3];
    y[1] = vertex_coordinates[4];
    y[2] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = vertex_coordinates[6];
    y[1] = vertex_coordinates[7];
    y[2] = vertex_coordinates[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = vertex_coordinates[9];
    y[1] = vertex_coordinates[10];
    y[2] = vertex_coordinates[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[2] = dof_values[1];
    vertex_values[4] = dof_values[2];
    vertex_values[6] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[3] = dof_values[5];
    vertex_values[5] = dof_values[6];
    vertex_values[7] = dof_values[7];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 2;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    case 1:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 4;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 3;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
    dofs[3] = c.entity_indices[0][3];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0][0] = vertex_coordinates[0];
    dof_coordinates[0][1] = vertex_coordinates[1];
    dof_coordinates[0][2] = vertex_coordinates[2];
    dof_coordinates[1][0] = vertex_coordinates[3];
    dof_coordinates[1][1] = vertex_coordinates[4];
    dof_coordinates[1][2] = vertex_coordinates[5];
    dof_coordinates[2][0] = vertex_coordinates[6];
    dof_coordinates[2][1] = vertex_coordinates[7];
    dof_coordinates[2][2] = vertex_coordinates[8];
    dof_coordinates[3][0] = vertex_coordinates[9];
    dof_coordinates[3][1] = vertex_coordinates[10];
    dof_coordinates[3][2] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), FiniteElement('Lagrange', Domain(Cell('tetrahedron', 3)), 1, None), **{'value_shape': (2,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 3;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 3;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 8;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    dofs[3] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + c.entity_indices[0][0];
    dofs[5] = offset + c.entity_indices[0][1];
    dofs[6] = offset + c.entity_indices[0][2];
    dofs[7] = offset + c.entity_indices[0][3];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0][0] = vertex_coordinates[0];
    dof_coordinates[0][1] = vertex_coordinates[1];
    dof_coordinates[0][2] = vertex_coordinates[2];
    dof_coordinates[1][0] = vertex_coordinates[3];
    dof_coordinates[1][1] = vertex_coordinates[4];
    dof_coordinates[1][2] = vertex_coordinates[5];
    dof_coordinates[2][0] = vertex_coordinates[6];
    dof_coordinates[2][1] = vertex_coordinates[7];
    dof_coordinates[2][2] = vertex_coordinates[8];
    dof_coordinates[3][0] = vertex_coordinates[9];
    dof_coordinates[3][1] = vertex_coordinates[10];
    dof_coordinates[3][2] = vertex_coordinates[11];
    dof_coordinates[4][0] = vertex_coordinates[0];
    dof_coordinates[4][1] = vertex_coordinates[1];
    dof_coordinates[4][2] = vertex_coordinates[2];
    dof_coordinates[5][0] = vertex_coordinates[3];
    dof_coordinates[5][1] = vertex_coordinates[4];
    dof_coordinates[5][2] = vertex_coordinates[5];
    dof_coordinates[6][0] = vertex_coordinates[6];
    dof_coordinates[6][1] = vertex_coordinates[7];
    dof_coordinates[6][2] = vertex_coordinates[8];
    dof_coordinates[7][0] = vertex_coordinates[9];
    dof_coordinates[7][1] = vertex_coordinates[10];
    dof_coordinates[7][2] = vertex_coordinates[11];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 2;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    case 1:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_1();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, false, false, true, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W4[4] = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
    // Quadrature points on the UFC reference element: (0.585410196624969, 0.138196601125011, 0.138196601125011), (0.138196601125011, 0.585410196624969, 0.138196601125011), (0.138196601125011, 0.138196601125011, 0.585410196624969), (0.138196601125011, 0.138196601125011, 0.138196601125011)
    
    // Values of basis functions at quadrature points.
    static const double FE0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    static const double FE0_D001[4][4] = \
    {{-1.0, 0.0, 0.0, 1.0},
    {-1.0, 0.0, 0.0, 1.0},
    {-1.0, 0.0, 0.0, 1.0},
    {-1.0, 0.0, 0.0, 1.0}};
    
    static const double FE0_D010[4][4] = \
    {{-1.0, 0.0, 1.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0}};
    
    static const double FE0_D100[4][4] = \
    {{-1.0, 1.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0}};
    
    static const double FE2_C0[4][8] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011, 0.0, 0.0, 0.0, 0.0},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011, 0.0, 0.0, 0.0, 0.0},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969, 0.0, 0.0, 0.0, 0.0},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D001[4][8] = \
    {{-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D010[4][8] = \
    {{-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D100[4][8] = \
    {{-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.0, 0.0, 0.0, 0.0, 0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.0, 0.0, 0.0, 0.0, 0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.0, 0.0, 0.0, 0.0, 0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    static const double FE2_C1_D001[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0}};
    
    static const double FE2_C1_D010[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0}};
    
    static const double FE2_C1_D100[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0}};
    
    static const double FEA4_f0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 8; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    
    // Declare array to hold physical coordinate of quadrature point.
    double X4[3];
    // Number of operations to compute element tensor for following IP loop = 8596
    for (unsigned int ip = 0; ip < 4; ip++)
    {
      
      // Compute physical coordinate of quadrature point, operations: 21.
      X4[0] = FEA4_f0[ip][0]*vertex_coordinates[0] +                  FEA4_f0[ip][1]*vertex_coordinates[3] +                  FEA4_f0[ip][2]*vertex_coordinates[6] +                  FEA4_f0[ip][3]*vertex_coordinates[9];
      X4[1] = FEA4_f0[ip][0]*vertex_coordinates[1] +                  FEA4_f0[ip][1]*vertex_coordinates[4] +                  FEA4_f0[ip][2]*vertex_coordinates[7] +                  FEA4_f0[ip][3]*vertex_coordinates[10];
      X4[2] = FEA4_f0[ip][0]*vertex_coordinates[2] +                  FEA4_f0[ip][1]*vertex_coordinates[5] +                  FEA4_f0[ip][2]*vertex_coordinates[8] +                  FEA4_f0[ip][3]*vertex_coordinates[11];
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 8; r++)
      {
        F7 += FE2_C0_D100[ip][r]*w[6][r];
        F8 += FE2_C0_D010[ip][r]*w[6][r];
        F9 += FE2_C0_D001[ip][r]*w[6][r];
        F10 += FE2_C1_D100[ip][r]*w[6][r];
        F11 += FE2_C1_D010[ip][r]*w[6][r];
        F12 += FE2_C1_D001[ip][r]*w[6][r];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 56
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0_D100[ip][r]*w[0][r];
        F1 += FE0_D010[ip][r]*w[0][r];
        F2 += FE0_D001[ip][r]*w[0][r];
        F3 += FE0[ip][r]*w[4][r];
        F4 += FE0[ip][r]*w[0][r];
        F5 += FE0[ip][r]*w[3][r];
        F6 += FE0[ip][r]*w[5][r];
      } // end loop over 'r'
      double C[2];
      // Compute conditional, operations: 4.
      C[0] = (((0.000871*((F4 + (-1.0)*X4[2])) + F3) < 263.15)) ? 60000.0 : 139000.0;
      // Compute conditional, operations: 4.
      C[1] = (((0.000871*((F4 + (-1.0)*X4[2])) + F3) < 263.15)) ? 1.1384496e-05 : 54500000000.0;
      
      // Number of operations for primary indices: 1968
      for (unsigned int j = 0; j < 8; j++)
      {
        // Number of operations to compute entry: 246
        A[j] += (((FE2_C0[ip][j]*((K[0]*F0 + K[3]*F1 + K[6]*F2)) + FE2_C1[ip][j]*((K[1]*F0 + K[4]*F1 + K[7]*F2))))*8927.1 + (((((((((K[1]*FE2_C1_D100[ip][j] + K[4]*FE2_C1_D010[ip][j] + K[7]*FE2_C1_D001[ip][j]) + (K[0]*FE2_C0_D100[ip][j] + K[3]*FE2_C0_D010[ip][j] + K[6]*FE2_C0_D001[ip][j])))*2.0)*(((K[0]*F7 + K[3]*F8 + K[6]*F9) + (K[1]*F10 + K[4]*F11 + K[7]*F12))) + ((((((((K[2]*FE2_C1_D100[ip][j] + K[5]*FE2_C1_D010[ip][j] + K[8]*FE2_C1_D001[ip][j]))*2.0)*((K[2]*F10 + K[5]*F11 + K[8]*F12)) + (((K[2]*FE2_C0_D100[ip][j] + K[5]*FE2_C0_D010[ip][j] + K[8]*FE2_C0_D001[ip][j]))*2.0)*((K[2]*F7 + K[5]*F8 + K[8]*F9))) + ((((K[0]*FE2_C1_D100[ip][j] + K[3]*FE2_C1_D010[ip][j] + K[6]*FE2_C1_D001[ip][j]) + (K[1]*FE2_C0_D100[ip][j] + K[4]*FE2_C0_D010[ip][j] + K[7]*FE2_C0_D001[ip][j])))*2.0)*(((K[0]*F10 + K[3]*F11 + K[6]*F12) + (K[1]*F7 + K[4]*F8 + K[7]*F9)))))*0.5 + (((K[0]*FE2_C0_D100[ip][j] + K[3]*FE2_C0_D010[ip][j] + K[6]*FE2_C0_D001[ip][j]))*2.0)*((K[0]*F7 + K[3]*F8 + K[6]*F9))) + (((K[1]*FE2_C1_D100[ip][j] + K[4]*FE2_C1_D010[ip][j] + K[7]*FE2_C1_D001[ip][j]))*2.0)*((K[1]*F10 + K[4]*F11 + K[7]*F12)))))*0.5)*0.666666666666667)*(std::pow((0.5*(((((K[0]*F7 + K[3]*F8 + K[6]*F9) + (K[1]*F10 + K[4]*F11 + K[7]*F12)))*(((K[0]*F7 + K[3]*F8 + K[6]*F9) + (K[1]*F10 + K[4]*F11 + K[7]*F12))) + ((((K[0]*F7 + K[3]*F8 + K[6]*F9))*((K[0]*F7 + K[3]*F8 + K[6]*F9)) + 0.5*(((((K[2]*F7 + K[5]*F8 + K[8]*F9))*((K[2]*F7 + K[5]*F8 + K[8]*F9)) + ((K[2]*F10 + K[5]*F11 + K[8]*F12))*((K[2]*F10 + K[5]*F11 + K[8]*F12))) + (((K[0]*F10 + K[3]*F11 + K[6]*F12) + (K[1]*F7 + K[4]*F8 + K[7]*F9)))*(((K[0]*F10 + K[3]*F11 + K[6]*F12) + (K[1]*F7 + K[4]*F8 + K[7]*F9)))))) + ((K[1]*F10 + K[4]*F11 + K[7]*F12))*((K[1]*F10 + K[4]*F11 + K[7]*F12))))) + 1e-15), -0.333333333333333)))*(1.5*((std::pow((std::exp((-1.0)*C[0]/(8.314*((0.000871*((F4 + (-1.0)*X4[2])) + F3)))))*(F5*(C[1]*((181.25*F6 + 1.0)))), -1.33333333333333))*((std::exp((-1.0)*C[0]/(8.314*((0.000871*((F4 + (-1.0)*X4[2])) + F3)))))*(F5*(C[1]*((181.25*F6 + 1.0))))))))*W4[ip]*det;
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_1: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_1() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_1()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, false, false, true, true, true, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W4[4] = {0.0416666666666667, 0.0416666666666667, 0.0416666666666667, 0.0416666666666667};
    // Quadrature points on the UFC reference element: (0.585410196624969, 0.138196601125011, 0.138196601125011), (0.138196601125011, 0.585410196624969, 0.138196601125011), (0.138196601125011, 0.138196601125011, 0.585410196624969), (0.138196601125011, 0.138196601125011, 0.138196601125011)
    
    // Values of basis functions at quadrature points.
    static const double FE0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    static const double FE0_D001[4][4] = \
    {{-1.0, 0.0, 0.0, 1.0},
    {-1.0, 0.0, 0.0, 1.0},
    {-1.0, 0.0, 0.0, 1.0},
    {-1.0, 0.0, 0.0, 1.0}};
    
    static const double FE0_D010[4][4] = \
    {{-1.0, 0.0, 1.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0}};
    
    static const double FE0_D100[4][4] = \
    {{-1.0, 1.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0}};
    
    static const double FE2_C0[4][8] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011, 0.0, 0.0, 0.0, 0.0},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011, 0.0, 0.0, 0.0, 0.0},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969, 0.0, 0.0, 0.0, 0.0},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D001[4][8] = \
    {{-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D010[4][8] = \
    {{-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C0_D100[4][8] = \
    {{-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_C1[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.0, 0.0, 0.0, 0.0, 0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.0, 0.0, 0.0, 0.0, 0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.0, 0.0, 0.0, 0.0, 0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    static const double FE2_C1_D001[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0}};
    
    static const double FE2_C1_D010[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0}};
    
    static const double FE2_C1_D100[4][8] = \
    {{0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0}};
    
    static const double FEA4_f0[4][4] = \
    {{0.138196601125009, 0.585410196624969, 0.138196601125011, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.585410196624969, 0.138196601125011},
    {0.138196601125009, 0.138196601125011, 0.138196601125011, 0.585410196624969},
    {0.585410196624967, 0.138196601125011, 0.138196601125011, 0.138196601125011}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 8; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    
    // Declare array to hold physical coordinate of quadrature point.
    double X4[3];
    // Number of operations to compute element tensor for following IP loop = 8596
    for (unsigned int ip = 0; ip < 4; ip++)
    {
      
      // Compute physical coordinate of quadrature point, operations: 21.
      X4[0] = FEA4_f0[ip][0]*vertex_coordinates[0] +                  FEA4_f0[ip][1]*vertex_coordinates[3] +                  FEA4_f0[ip][2]*vertex_coordinates[6] +                  FEA4_f0[ip][3]*vertex_coordinates[9];
      X4[1] = FEA4_f0[ip][0]*vertex_coordinates[1] +                  FEA4_f0[ip][1]*vertex_coordinates[4] +                  FEA4_f0[ip][2]*vertex_coordinates[7] +                  FEA4_f0[ip][3]*vertex_coordinates[10];
      X4[2] = FEA4_f0[ip][0]*vertex_coordinates[2] +                  FEA4_f0[ip][1]*vertex_coordinates[5] +                  FEA4_f0[ip][2]*vertex_coordinates[8] +                  FEA4_f0[ip][3]*vertex_coordinates[11];
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      
      // Total number of operations to compute function values = 96
      for (unsigned int r = 0; r < 8; r++)
      {
        F7 += FE2_C0_D100[ip][r]*w[6][r];
        F8 += FE2_C0_D010[ip][r]*w[6][r];
        F9 += FE2_C0_D001[ip][r]*w[6][r];
        F10 += FE2_C1_D100[ip][r]*w[6][r];
        F11 += FE2_C1_D010[ip][r]*w[6][r];
        F12 += FE2_C1_D001[ip][r]*w[6][r];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 56
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0_D100[ip][r]*w[0][r];
        F1 += FE0_D010[ip][r]*w[0][r];
        F2 += FE0_D001[ip][r]*w[0][r];
        F3 += FE0[ip][r]*w[4][r];
        F4 += FE0[ip][r]*w[0][r];
        F5 += FE0[ip][r]*w[3][r];
        F6 += FE0[ip][r]*w[5][r];
      } // end loop over 'r'
      double C[2];
      // Compute conditional, operations: 4.
      C[0] = (((0.000871*((F4 + (-1.0)*X4[2])) + F3) < 263.15)) ? 60000.0 : 139000.0;
      // Compute conditional, operations: 4.
      C[1] = (((0.000871*((F4 + (-1.0)*X4[2])) + F3) < 263.15)) ? 1.1384496e-05 : 54500000000.0;
      
      // Number of operations for primary indices: 1968
      for (unsigned int j = 0; j < 8; j++)
      {
        // Number of operations to compute entry: 246
        A[j] += (((FE2_C0[ip][j]*((K[0]*F0 + K[3]*F1 + K[6]*F2)) + FE2_C1[ip][j]*((K[1]*F0 + K[4]*F1 + K[7]*F2))))*8927.1 + (((((((((K[1]*FE2_C1_D100[ip][j] + K[4]*FE2_C1_D010[ip][j] + K[7]*FE2_C1_D001[ip][j]) + (K[0]*FE2_C0_D100[ip][j] + K[3]*FE2_C0_D010[ip][j] + K[6]*FE2_C0_D001[ip][j])))*2.0)*(((K[0]*F7 + K[3]*F8 + K[6]*F9) + (K[1]*F10 + K[4]*F11 + K[7]*F12))) + ((((((((K[2]*FE2_C1_D100[ip][j] + K[5]*FE2_C1_D010[ip][j] + K[8]*FE2_C1_D001[ip][j]))*2.0)*((K[2]*F10 + K[5]*F11 + K[8]*F12)) + (((K[2]*FE2_C0_D100[ip][j] + K[5]*FE2_C0_D010[ip][j] + K[8]*FE2_C0_D001[ip][j]))*2.0)*((K[2]*F7 + K[5]*F8 + K[8]*F9))) + ((((K[0]*FE2_C1_D100[ip][j] + K[3]*FE2_C1_D010[ip][j] + K[6]*FE2_C1_D001[ip][j]) + (K[1]*FE2_C0_D100[ip][j] + K[4]*FE2_C0_D010[ip][j] + K[7]*FE2_C0_D001[ip][j])))*2.0)*(((K[0]*F10 + K[3]*F11 + K[6]*F12) + (K[1]*F7 + K[4]*F8 + K[7]*F9)))))*0.5 + (((K[0]*FE2_C0_D100[ip][j] + K[3]*FE2_C0_D010[ip][j] + K[6]*FE2_C0_D001[ip][j]))*2.0)*((K[0]*F7 + K[3]*F8 + K[6]*F9))) + (((K[1]*FE2_C1_D100[ip][j] + K[4]*FE2_C1_D010[ip][j] + K[7]*FE2_C1_D001[ip][j]))*2.0)*((K[1]*F10 + K[4]*F11 + K[7]*F12)))))*0.5)*0.666666666666667)*(std::pow((0.5*(((((K[0]*F7 + K[3]*F8 + K[6]*F9) + (K[1]*F10 + K[4]*F11 + K[7]*F12)))*(((K[0]*F7 + K[3]*F8 + K[6]*F9) + (K[1]*F10 + K[4]*F11 + K[7]*F12))) + ((((K[0]*F7 + K[3]*F8 + K[6]*F9))*((K[0]*F7 + K[3]*F8 + K[6]*F9)) + 0.5*(((((K[2]*F7 + K[5]*F8 + K[8]*F9))*((K[2]*F7 + K[5]*F8 + K[8]*F9)) + ((K[2]*F10 + K[5]*F11 + K[8]*F12))*((K[2]*F10 + K[5]*F11 + K[8]*F12))) + (((K[0]*F10 + K[3]*F11 + K[6]*F12) + (K[1]*F7 + K[4]*F8 + K[7]*F9)))*(((K[0]*F10 + K[3]*F11 + K[6]*F12) + (K[1]*F7 + K[4]*F8 + K[7]*F9)))))) + ((K[1]*F10 + K[4]*F11 + K[7]*F12))*((K[1]*F10 + K[4]*F11 + K[7]*F12))))) + 1e-15), -0.333333333333333)))*(1.5*((std::pow((std::exp((-1.0)*C[0]/(8.314*((0.000871*((F4 + (-1.0)*X4[2])) + F3)))))*(F5*(C[1]*((181.25*F6 + 1.0)))), -1.33333333333333))*((std::exp((-1.0)*C[0]/(8.314*((0.000871*((F4 + (-1.0)*X4[2])) + F3)))))*(F5*(C[1]*((181.25*F6 + 1.0))))))))*W4[ip]*det;
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_otherwise()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, false, false, false, false, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    27
    // Number of operations (multiply-add pairs) for tensor contraction: 62
    // Total number of operations (multiply-add pairs):                  92
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*w[0][0]*K[0]*(1.0);
    const double G0_0_1 = det*w[0][0]*K[3]*(1.0);
    const double G0_0_2 = det*w[0][0]*K[6]*(1.0);
    const double G0_1_0 = det*w[0][1]*K[0]*(1.0);
    const double G0_1_1 = det*w[0][1]*K[3]*(1.0);
    const double G0_1_2 = det*w[0][1]*K[6]*(1.0);
    const double G0_2_1 = det*w[0][2]*K[3]*(1.0);
    const double G0_2_2 = det*w[0][2]*K[6]*(1.0);
    const double G0_3_2 = det*w[0][3]*K[6]*(1.0);
    const double G1_0_0 = det*w[0][0]*K[1]*(1.0);
    const double G1_0_1 = det*w[0][0]*K[4]*(1.0);
    const double G1_0_2 = det*w[0][0]*K[7]*(1.0);
    const double G1_1_0 = det*w[0][1]*K[1]*(1.0);
    const double G1_1_1 = det*w[0][1]*K[4]*(1.0);
    const double G1_1_2 = det*w[0][1]*K[7]*(1.0);
    const double G1_2_1 = det*w[0][2]*K[4]*(1.0);
    const double G1_2_2 = det*w[0][2]*K[7]*(1.0);
    const double G1_3_2 = det*w[0][3]*K[7]*(1.0);
    
    // Compute element tensor
    A[0] = -371.962499999998*G0_0_0 - 371.962499999998*G0_0_1 - 371.962499999998*G0_0_2 + 371.962499999998*G0_1_0 + 1.99744483576474e-14*G0_1_1 + 6.12705815373607e-14*G0_1_2 + 371.962499999998*G0_2_1 + 371.962499999998*G0_3_2;
    A[1] = -371.962500000001*G0_0_0 - 371.962500000001*G0_0_1 - 371.962500000001*G0_0_2 + 371.962500000001*G0_1_0 + 1.99744483576477e-14*G0_1_1 + 6.12705815373612e-14*G0_1_2 + 371.962500000001*G0_2_1 + 371.962500000001*G0_3_2;
    A[2] = -371.962500000001*G0_0_0 - 371.962500000001*G0_0_1 - 371.962500000001*G0_0_2 + 371.962500000001*G0_1_0 + 1.99744483576477e-14*G0_1_1 + 6.12705815373612e-14*G0_1_2 + 371.962500000001*G0_2_1 + 371.962500000001*G0_3_2;
    A[3] = -371.962500000001*G0_0_0 - 371.962500000001*G0_0_1 - 371.962500000001*G0_0_2 + 371.962500000001*G0_1_0 + 8.46131210560544e-14*G0_1_1 + 1.25909254235768e-13*G0_1_2 + 371.962500000001*G0_2_1 + 1.20875887222935e-14*G0_2_2 + 371.962500000001*G0_3_2;
    A[4] = -371.962499999998*G1_0_0 - 371.962499999998*G1_0_1 - 371.962499999998*G1_0_2 + 371.962499999998*G1_1_0 + 1.99744483576474e-14*G1_1_1 + 6.12705815373607e-14*G1_1_2 + 371.962499999998*G1_2_1 + 371.962499999998*G1_3_2;
    A[5] = -371.962500000001*G1_0_0 - 371.962500000001*G1_0_1 - 371.962500000001*G1_0_2 + 371.962500000001*G1_1_0 + 1.99744483576477e-14*G1_1_1 + 6.12705815373612e-14*G1_1_2 + 371.962500000001*G1_2_1 + 371.962500000001*G1_3_2;
    A[6] = -371.962500000001*G1_0_0 - 371.962500000001*G1_0_1 - 371.962500000001*G1_0_2 + 371.962500000001*G1_1_0 + 1.99744483576477e-14*G1_1_1 + 6.12705815373612e-14*G1_1_2 + 371.962500000001*G1_2_1 + 371.962500000001*G1_3_2;
    A[7] = -371.962500000001*G1_0_0 - 371.962500000001*G1_0_1 - 371.962500000001*G1_0_2 + 371.962500000001*G1_1_0 + 8.46131210560544e-14*G1_1_1 + 1.25909254235768e-13*G1_1_2 + 371.962500000001*G1_2_1 + 1.20875887222935e-14*G1_2_2 + 371.962500000001*G1_3_2;
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_3: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_3() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_3()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({false, false, true, false, false, false, true});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Number of operations (multiply-add pairs) for Jacobian data:      59
    // Number of operations (multiply-add pairs) for geometry tensor:    256
    // Number of operations (multiply-add pairs) for tensor contraction: 636
    // Total number of operations (multiply-add pairs):                  951
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates[3*v0 + 1]*vertex_coordinates[3*v1 + 2]  + vertex_coordinates[3*v0 + 2]*vertex_coordinates[3*v2 + 1]  + vertex_coordinates[3*v1 + 1]*vertex_coordinates[3*v2 + 2]) - (vertex_coordinates[3*v2 + 1]*vertex_coordinates[3*v1 + 2] + vertex_coordinates[3*v2 + 2]*vertex_coordinates[3*v0 + 1] + vertex_coordinates[3*v1 + 1]*vertex_coordinates[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates[3*v0 + 2]*vertex_coordinates[3*v1 + 0]  + vertex_coordinates[3*v0 + 0]*vertex_coordinates[3*v2 + 2] + vertex_coordinates[3*v1 + 2]*vertex_coordinates[3*v2 + 0]) - (vertex_coordinates[3*v2 + 2]*vertex_coordinates[3*v1 + 0]  + vertex_coordinates[3*v2 + 0]*vertex_coordinates[3*v0 + 2] + vertex_coordinates[3*v1 + 2]*vertex_coordinates[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates[3*v0 + 0]*vertex_coordinates[3*v1 + 1]  + vertex_coordinates[3*v0 + 1]*vertex_coordinates[3*v2 + 0]  + vertex_coordinates[3*v1 + 0]*vertex_coordinates[3*v2 + 1]) - (vertex_coordinates[3*v2 + 0]*vertex_coordinates[3*v1 + 1]  + vertex_coordinates[3*v2 + 1]*vertex_coordinates[3*v0 + 0]  + vertex_coordinates[3*v1 + 0]*vertex_coordinates[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    // Compute geometry tensor
    const double G0_0_0_0 = det*w[2][0]*w[2][0]*w[6][0]*(1.0);
    const double G0_0_0_1 = det*w[2][0]*w[2][0]*w[6][1]*(1.0);
    const double G0_0_0_2 = det*w[2][0]*w[2][0]*w[6][2]*(1.0);
    const double G0_0_0_3 = det*w[2][0]*w[2][0]*w[6][3]*(1.0);
    const double G0_0_1_0 = det*w[2][0]*w[2][1]*w[6][0]*(1.0);
    const double G0_0_1_1 = det*w[2][0]*w[2][1]*w[6][1]*(1.0);
    const double G0_0_1_2 = det*w[2][0]*w[2][1]*w[6][2]*(1.0);
    const double G0_0_1_3 = det*w[2][0]*w[2][1]*w[6][3]*(1.0);
    const double G0_0_2_0 = det*w[2][0]*w[2][2]*w[6][0]*(1.0);
    const double G0_0_2_1 = det*w[2][0]*w[2][2]*w[6][1]*(1.0);
    const double G0_0_2_2 = det*w[2][0]*w[2][2]*w[6][2]*(1.0);
    const double G0_0_2_3 = det*w[2][0]*w[2][2]*w[6][3]*(1.0);
    const double G0_0_3_0 = det*w[2][0]*w[2][3]*w[6][0]*(1.0);
    const double G0_0_3_1 = det*w[2][0]*w[2][3]*w[6][1]*(1.0);
    const double G0_0_3_2 = det*w[2][0]*w[2][3]*w[6][2]*(1.0);
    const double G0_0_3_3 = det*w[2][0]*w[2][3]*w[6][3]*(1.0);
    const double G0_1_0_0 = det*w[2][1]*w[2][0]*w[6][0]*(1.0);
    const double G0_1_0_1 = det*w[2][1]*w[2][0]*w[6][1]*(1.0);
    const double G0_1_0_2 = det*w[2][1]*w[2][0]*w[6][2]*(1.0);
    const double G0_1_0_3 = det*w[2][1]*w[2][0]*w[6][3]*(1.0);
    const double G0_1_1_0 = det*w[2][1]*w[2][1]*w[6][0]*(1.0);
    const double G0_1_1_1 = det*w[2][1]*w[2][1]*w[6][1]*(1.0);
    const double G0_1_1_2 = det*w[2][1]*w[2][1]*w[6][2]*(1.0);
    const double G0_1_1_3 = det*w[2][1]*w[2][1]*w[6][3]*(1.0);
    const double G0_1_2_0 = det*w[2][1]*w[2][2]*w[6][0]*(1.0);
    const double G0_1_2_1 = det*w[2][1]*w[2][2]*w[6][1]*(1.0);
    const double G0_1_2_2 = det*w[2][1]*w[2][2]*w[6][2]*(1.0);
    const double G0_1_2_3 = det*w[2][1]*w[2][2]*w[6][3]*(1.0);
    const double G0_1_3_0 = det*w[2][1]*w[2][3]*w[6][0]*(1.0);
    const double G0_1_3_1 = det*w[2][1]*w[2][3]*w[6][1]*(1.0);
    const double G0_1_3_2 = det*w[2][1]*w[2][3]*w[6][2]*(1.0);
    const double G0_1_3_3 = det*w[2][1]*w[2][3]*w[6][3]*(1.0);
    const double G0_2_0_0 = det*w[2][2]*w[2][0]*w[6][0]*(1.0);
    const double G0_2_0_1 = det*w[2][2]*w[2][0]*w[6][1]*(1.0);
    const double G0_2_0_2 = det*w[2][2]*w[2][0]*w[6][2]*(1.0);
    const double G0_2_0_3 = det*w[2][2]*w[2][0]*w[6][3]*(1.0);
    const double G0_2_1_0 = det*w[2][2]*w[2][1]*w[6][0]*(1.0);
    const double G0_2_1_1 = det*w[2][2]*w[2][1]*w[6][1]*(1.0);
    const double G0_2_1_2 = det*w[2][2]*w[2][1]*w[6][2]*(1.0);
    const double G0_2_1_3 = det*w[2][2]*w[2][1]*w[6][3]*(1.0);
    const double G0_2_2_0 = det*w[2][2]*w[2][2]*w[6][0]*(1.0);
    const double G0_2_2_1 = det*w[2][2]*w[2][2]*w[6][1]*(1.0);
    const double G0_2_2_2 = det*w[2][2]*w[2][2]*w[6][2]*(1.0);
    const double G0_2_2_3 = det*w[2][2]*w[2][2]*w[6][3]*(1.0);
    const double G0_2_3_0 = det*w[2][2]*w[2][3]*w[6][0]*(1.0);
    const double G0_2_3_1 = det*w[2][2]*w[2][3]*w[6][1]*(1.0);
    const double G0_2_3_2 = det*w[2][2]*w[2][3]*w[6][2]*(1.0);
    const double G0_2_3_3 = det*w[2][2]*w[2][3]*w[6][3]*(1.0);
    const double G0_3_0_0 = det*w[2][3]*w[2][0]*w[6][0]*(1.0);
    const double G0_3_0_1 = det*w[2][3]*w[2][0]*w[6][1]*(1.0);
    const double G0_3_0_2 = det*w[2][3]*w[2][0]*w[6][2]*(1.0);
    const double G0_3_0_3 = det*w[2][3]*w[2][0]*w[6][3]*(1.0);
    const double G0_3_1_0 = det*w[2][3]*w[2][1]*w[6][0]*(1.0);
    const double G0_3_1_1 = det*w[2][3]*w[2][1]*w[6][1]*(1.0);
    const double G0_3_1_2 = det*w[2][3]*w[2][1]*w[6][2]*(1.0);
    const double G0_3_1_3 = det*w[2][3]*w[2][1]*w[6][3]*(1.0);
    const double G0_3_2_0 = det*w[2][3]*w[2][2]*w[6][0]*(1.0);
    const double G0_3_2_1 = det*w[2][3]*w[2][2]*w[6][1]*(1.0);
    const double G0_3_2_2 = det*w[2][3]*w[2][2]*w[6][2]*(1.0);
    const double G0_3_2_3 = det*w[2][3]*w[2][2]*w[6][3]*(1.0);
    const double G0_3_3_0 = det*w[2][3]*w[2][3]*w[6][0]*(1.0);
    const double G0_3_3_1 = det*w[2][3]*w[2][3]*w[6][1]*(1.0);
    const double G0_3_3_2 = det*w[2][3]*w[2][3]*w[6][2]*(1.0);
    const double G0_3_3_3 = det*w[2][3]*w[2][3]*w[6][3]*(1.0);
    const double G1_0_0_4 = det*w[2][0]*w[2][0]*w[6][4]*(1.0);
    const double G1_0_0_5 = det*w[2][0]*w[2][0]*w[6][5]*(1.0);
    const double G1_0_0_6 = det*w[2][0]*w[2][0]*w[6][6]*(1.0);
    const double G1_0_0_7 = det*w[2][0]*w[2][0]*w[6][7]*(1.0);
    const double G1_0_1_4 = det*w[2][0]*w[2][1]*w[6][4]*(1.0);
    const double G1_0_1_5 = det*w[2][0]*w[2][1]*w[6][5]*(1.0);
    const double G1_0_1_6 = det*w[2][0]*w[2][1]*w[6][6]*(1.0);
    const double G1_0_1_7 = det*w[2][0]*w[2][1]*w[6][7]*(1.0);
    const double G1_0_2_4 = det*w[2][0]*w[2][2]*w[6][4]*(1.0);
    const double G1_0_2_5 = det*w[2][0]*w[2][2]*w[6][5]*(1.0);
    const double G1_0_2_6 = det*w[2][0]*w[2][2]*w[6][6]*(1.0);
    const double G1_0_2_7 = det*w[2][0]*w[2][2]*w[6][7]*(1.0);
    const double G1_0_3_4 = det*w[2][0]*w[2][3]*w[6][4]*(1.0);
    const double G1_0_3_5 = det*w[2][0]*w[2][3]*w[6][5]*(1.0);
    const double G1_0_3_6 = det*w[2][0]*w[2][3]*w[6][6]*(1.0);
    const double G1_0_3_7 = det*w[2][0]*w[2][3]*w[6][7]*(1.0);
    const double G1_1_0_4 = det*w[2][1]*w[2][0]*w[6][4]*(1.0);
    const double G1_1_0_5 = det*w[2][1]*w[2][0]*w[6][5]*(1.0);
    const double G1_1_0_6 = det*w[2][1]*w[2][0]*w[6][6]*(1.0);
    const double G1_1_0_7 = det*w[2][1]*w[2][0]*w[6][7]*(1.0);
    const double G1_1_1_4 = det*w[2][1]*w[2][1]*w[6][4]*(1.0);
    const double G1_1_1_5 = det*w[2][1]*w[2][1]*w[6][5]*(1.0);
    const double G1_1_1_6 = det*w[2][1]*w[2][1]*w[6][6]*(1.0);
    const double G1_1_1_7 = det*w[2][1]*w[2][1]*w[6][7]*(1.0);
    const double G1_1_2_4 = det*w[2][1]*w[2][2]*w[6][4]*(1.0);
    const double G1_1_2_5 = det*w[2][1]*w[2][2]*w[6][5]*(1.0);
    const double G1_1_2_6 = det*w[2][1]*w[2][2]*w[6][6]*(1.0);
    const double G1_1_2_7 = det*w[2][1]*w[2][2]*w[6][7]*(1.0);
    const double G1_1_3_4 = det*w[2][1]*w[2][3]*w[6][4]*(1.0);
    const double G1_1_3_5 = det*w[2][1]*w[2][3]*w[6][5]*(1.0);
    const double G1_1_3_6 = det*w[2][1]*w[2][3]*w[6][6]*(1.0);
    const double G1_1_3_7 = det*w[2][1]*w[2][3]*w[6][7]*(1.0);
    const double G1_2_0_4 = det*w[2][2]*w[2][0]*w[6][4]*(1.0);
    const double G1_2_0_5 = det*w[2][2]*w[2][0]*w[6][5]*(1.0);
    const double G1_2_0_6 = det*w[2][2]*w[2][0]*w[6][6]*(1.0);
    const double G1_2_0_7 = det*w[2][2]*w[2][0]*w[6][7]*(1.0);
    const double G1_2_1_4 = det*w[2][2]*w[2][1]*w[6][4]*(1.0);
    const double G1_2_1_5 = det*w[2][2]*w[2][1]*w[6][5]*(1.0);
    const double G1_2_1_6 = det*w[2][2]*w[2][1]*w[6][6]*(1.0);
    const double G1_2_1_7 = det*w[2][2]*w[2][1]*w[6][7]*(1.0);
    const double G1_2_2_4 = det*w[2][2]*w[2][2]*w[6][4]*(1.0);
    const double G1_2_2_5 = det*w[2][2]*w[2][2]*w[6][5]*(1.0);
    const double G1_2_2_6 = det*w[2][2]*w[2][2]*w[6][6]*(1.0);
    const double G1_2_2_7 = det*w[2][2]*w[2][2]*w[6][7]*(1.0);
    const double G1_2_3_4 = det*w[2][2]*w[2][3]*w[6][4]*(1.0);
    const double G1_2_3_5 = det*w[2][2]*w[2][3]*w[6][5]*(1.0);
    const double G1_2_3_6 = det*w[2][2]*w[2][3]*w[6][6]*(1.0);
    const double G1_2_3_7 = det*w[2][2]*w[2][3]*w[6][7]*(1.0);
    const double G1_3_0_4 = det*w[2][3]*w[2][0]*w[6][4]*(1.0);
    const double G1_3_0_5 = det*w[2][3]*w[2][0]*w[6][5]*(1.0);
    const double G1_3_0_6 = det*w[2][3]*w[2][0]*w[6][6]*(1.0);
    const double G1_3_0_7 = det*w[2][3]*w[2][0]*w[6][7]*(1.0);
    const double G1_3_1_4 = det*w[2][3]*w[2][1]*w[6][4]*(1.0);
    const double G1_3_1_5 = det*w[2][3]*w[2][1]*w[6][5]*(1.0);
    const double G1_3_1_6 = det*w[2][3]*w[2][1]*w[6][6]*(1.0);
    const double G1_3_1_7 = det*w[2][3]*w[2][1]*w[6][7]*(1.0);
    const double G1_3_2_4 = det*w[2][3]*w[2][2]*w[6][4]*(1.0);
    const double G1_3_2_5 = det*w[2][3]*w[2][2]*w[6][5]*(1.0);
    const double G1_3_2_6 = det*w[2][3]*w[2][2]*w[6][6]*(1.0);
    const double G1_3_2_7 = det*w[2][3]*w[2][2]*w[6][7]*(1.0);
    const double G1_3_3_4 = det*w[2][3]*w[2][3]*w[6][4]*(1.0);
    const double G1_3_3_5 = det*w[2][3]*w[2][3]*w[6][5]*(1.0);
    const double G1_3_3_6 = det*w[2][3]*w[2][3]*w[6][6]*(1.0);
    const double G1_3_3_7 = det*w[2][3]*w[2][3]*w[6][7]*(1.0);
    
    // Compute element tensor
    switch (facet)
    {
    case 0:
      {
        A[0] = 0.0;
      A[1] = 0.033179012345679*G0_1_1_1 + 0.00887345679012346*G0_1_1_2 + 0.00887345679012345*G0_1_1_3 + 0.00887345679012346*G0_1_2_1 + 0.00424382716049383*G0_1_2_2 + 0.00308641975308642*G0_1_2_3 + 0.00887345679012345*G0_1_3_1 + 0.00308641975308642*G0_1_3_2 + 0.00424382716049383*G0_1_3_3 + 0.00887345679012346*G0_2_1_1 + 0.00424382716049383*G0_2_1_2 + 0.00308641975308642*G0_2_1_3 + 0.00424382716049383*G0_2_2_1 + 0.00887345679012346*G0_2_2_2 + 0.00308641975308642*G0_2_2_3 + 0.00308641975308642*G0_2_3_1 + 0.00308641975308642*G0_2_3_2 + 0.00308641975308642*G0_2_3_3 + 0.00887345679012345*G0_3_1_1 + 0.00308641975308642*G0_3_1_2 + 0.00424382716049383*G0_3_1_3 + 0.00308641975308642*G0_3_2_1 + 0.00308641975308642*G0_3_2_2 + 0.00308641975308642*G0_3_2_3 + 0.00424382716049383*G0_3_3_1 + 0.00308641975308642*G0_3_3_2 + 0.00887345679012345*G0_3_3_3;
      A[2] = 0.00887345679012346*G0_1_1_1 + 0.00424382716049383*G0_1_1_2 + 0.00308641975308642*G0_1_1_3 + 0.00424382716049383*G0_1_2_1 + 0.00887345679012346*G0_1_2_2 + 0.00308641975308642*G0_1_2_3 + 0.00308641975308642*G0_1_3_1 + 0.00308641975308642*G0_1_3_2 + 0.00308641975308642*G0_1_3_3 + 0.00424382716049383*G0_2_1_1 + 0.00887345679012346*G0_2_1_2 + 0.00308641975308642*G0_2_1_3 + 0.00887345679012346*G0_2_2_1 + 0.033179012345679*G0_2_2_2 + 0.00887345679012345*G0_2_2_3 + 0.00308641975308642*G0_2_3_1 + 0.00887345679012345*G0_2_3_2 + 0.00424382716049383*G0_2_3_3 + 0.00308641975308642*G0_3_1_1 + 0.00308641975308642*G0_3_1_2 + 0.00308641975308642*G0_3_1_3 + 0.00308641975308642*G0_3_2_1 + 0.00887345679012345*G0_3_2_2 + 0.00424382716049382*G0_3_2_3 + 0.00308641975308642*G0_3_3_1 + 0.00424382716049382*G0_3_3_2 + 0.00887345679012345*G0_3_3_3;
      A[3] = 0.00887345679012345*G0_1_1_1 + 0.00308641975308642*G0_1_1_2 + 0.00424382716049383*G0_1_1_3 + 0.00308641975308642*G0_1_2_1 + 0.00308641975308642*G0_1_2_2 + 0.00308641975308642*G0_1_2_3 + 0.00424382716049383*G0_1_3_1 + 0.00308641975308642*G0_1_3_2 + 0.00887345679012345*G0_1_3_3 + 0.00308641975308642*G0_2_1_1 + 0.00308641975308642*G0_2_1_2 + 0.00308641975308642*G0_2_1_3 + 0.00308641975308642*G0_2_2_1 + 0.00887345679012345*G0_2_2_2 + 0.00424382716049383*G0_2_2_3 + 0.00308641975308642*G0_2_3_1 + 0.00424382716049383*G0_2_3_2 + 0.00887345679012345*G0_2_3_3 + 0.00424382716049383*G0_3_1_1 + 0.00308641975308642*G0_3_1_2 + 0.00887345679012345*G0_3_1_3 + 0.00308641975308642*G0_3_2_1 + 0.00424382716049382*G0_3_2_2 + 0.00887345679012345*G0_3_2_3 + 0.00887345679012345*G0_3_3_1 + 0.00887345679012345*G0_3_3_2 + 0.033179012345679*G0_3_3_3;
      A[4] = 0.0;
      A[5] = 0.033179012345679*G1_1_1_5 + 0.00887345679012346*G1_1_1_6 + 0.00887345679012345*G1_1_1_7 + 0.00887345679012346*G1_1_2_5 + 0.00424382716049383*G1_1_2_6 + 0.00308641975308642*G1_1_2_7 + 0.00887345679012345*G1_1_3_5 + 0.00308641975308642*G1_1_3_6 + 0.00424382716049383*G1_1_3_7 + 0.00887345679012346*G1_2_1_5 + 0.00424382716049383*G1_2_1_6 + 0.00308641975308642*G1_2_1_7 + 0.00424382716049383*G1_2_2_5 + 0.00887345679012346*G1_2_2_6 + 0.00308641975308642*G1_2_2_7 + 0.00308641975308642*G1_2_3_5 + 0.00308641975308642*G1_2_3_6 + 0.00308641975308642*G1_2_3_7 + 0.00887345679012345*G1_3_1_5 + 0.00308641975308642*G1_3_1_6 + 0.00424382716049383*G1_3_1_7 + 0.00308641975308642*G1_3_2_5 + 0.00308641975308642*G1_3_2_6 + 0.00308641975308642*G1_3_2_7 + 0.00424382716049383*G1_3_3_5 + 0.00308641975308642*G1_3_3_6 + 0.00887345679012345*G1_3_3_7;
      A[6] = 0.00887345679012346*G1_1_1_5 + 0.00424382716049383*G1_1_1_6 + 0.00308641975308642*G1_1_1_7 + 0.00424382716049383*G1_1_2_5 + 0.00887345679012346*G1_1_2_6 + 0.00308641975308642*G1_1_2_7 + 0.00308641975308642*G1_1_3_5 + 0.00308641975308642*G1_1_3_6 + 0.00308641975308642*G1_1_3_7 + 0.00424382716049383*G1_2_1_5 + 0.00887345679012346*G1_2_1_6 + 0.00308641975308642*G1_2_1_7 + 0.00887345679012346*G1_2_2_5 + 0.033179012345679*G1_2_2_6 + 0.00887345679012345*G1_2_2_7 + 0.00308641975308642*G1_2_3_5 + 0.00887345679012345*G1_2_3_6 + 0.00424382716049383*G1_2_3_7 + 0.00308641975308642*G1_3_1_5 + 0.00308641975308642*G1_3_1_6 + 0.00308641975308642*G1_3_1_7 + 0.00308641975308642*G1_3_2_5 + 0.00887345679012345*G1_3_2_6 + 0.00424382716049382*G1_3_2_7 + 0.00308641975308642*G1_3_3_5 + 0.00424382716049382*G1_3_3_6 + 0.00887345679012345*G1_3_3_7;
      A[7] = 0.00887345679012345*G1_1_1_5 + 0.00308641975308642*G1_1_1_6 + 0.00424382716049383*G1_1_1_7 + 0.00308641975308642*G1_1_2_5 + 0.00308641975308642*G1_1_2_6 + 0.00308641975308642*G1_1_2_7 + 0.00424382716049383*G1_1_3_5 + 0.00308641975308642*G1_1_3_6 + 0.00887345679012345*G1_1_3_7 + 0.00308641975308642*G1_2_1_5 + 0.00308641975308642*G1_2_1_6 + 0.00308641975308642*G1_2_1_7 + 0.00308641975308642*G1_2_2_5 + 0.00887345679012345*G1_2_2_6 + 0.00424382716049383*G1_2_2_7 + 0.00308641975308642*G1_2_3_5 + 0.00424382716049383*G1_2_3_6 + 0.00887345679012345*G1_2_3_7 + 0.00424382716049383*G1_3_1_5 + 0.00308641975308642*G1_3_1_6 + 0.00887345679012345*G1_3_1_7 + 0.00308641975308642*G1_3_2_5 + 0.00424382716049382*G1_3_2_6 + 0.00887345679012345*G1_3_2_7 + 0.00887345679012345*G1_3_3_5 + 0.00887345679012345*G1_3_3_6 + 0.033179012345679*G1_3_3_7;
        break;
      }
    case 1:
      {
        A[0] = 0.0331790123456791*G0_0_0_0 + 0.00887345679012346*G0_0_0_2 + 0.00887345679012346*G0_0_0_3 + 0.00887345679012346*G0_0_2_0 + 0.00424382716049383*G0_0_2_2 + 0.00308641975308642*G0_0_2_3 + 0.00887345679012346*G0_0_3_0 + 0.00308641975308642*G0_0_3_2 + 0.00424382716049383*G0_0_3_3 + 0.00887345679012346*G0_2_0_0 + 0.00424382716049383*G0_2_0_2 + 0.00308641975308642*G0_2_0_3 + 0.00424382716049383*G0_2_2_0 + 0.00887345679012346*G0_2_2_2 + 0.00308641975308642*G0_2_2_3 + 0.00308641975308642*G0_2_3_0 + 0.00308641975308642*G0_2_3_2 + 0.00308641975308642*G0_2_3_3 + 0.00887345679012346*G0_3_0_0 + 0.00308641975308642*G0_3_0_2 + 0.00424382716049383*G0_3_0_3 + 0.00308641975308642*G0_3_2_0 + 0.00308641975308642*G0_3_2_2 + 0.00308641975308642*G0_3_2_3 + 0.00424382716049383*G0_3_3_0 + 0.00308641975308642*G0_3_3_2 + 0.00887345679012345*G0_3_3_3;
      A[1] = 0.0;
      A[2] = 0.00887345679012346*G0_0_0_0 + 0.00424382716049383*G0_0_0_2 + 0.00308641975308642*G0_0_0_3 + 0.00424382716049383*G0_0_2_0 + 0.00887345679012346*G0_0_2_2 + 0.00308641975308642*G0_0_2_3 + 0.00308641975308642*G0_0_3_0 + 0.00308641975308642*G0_0_3_2 + 0.00308641975308642*G0_0_3_3 + 0.00424382716049383*G0_2_0_0 + 0.00887345679012346*G0_2_0_2 + 0.00308641975308642*G0_2_0_3 + 0.00887345679012346*G0_2_2_0 + 0.033179012345679*G0_2_2_2 + 0.00887345679012345*G0_2_2_3 + 0.00308641975308642*G0_2_3_0 + 0.00887345679012345*G0_2_3_2 + 0.00424382716049383*G0_2_3_3 + 0.00308641975308642*G0_3_0_0 + 0.00308641975308642*G0_3_0_2 + 0.00308641975308642*G0_3_0_3 + 0.00308641975308642*G0_3_2_0 + 0.00887345679012345*G0_3_2_2 + 0.00424382716049382*G0_3_2_3 + 0.00308641975308642*G0_3_3_0 + 0.00424382716049382*G0_3_3_2 + 0.00887345679012345*G0_3_3_3;
      A[3] = 0.00887345679012346*G0_0_0_0 + 0.00308641975308642*G0_0_0_2 + 0.00424382716049383*G0_0_0_3 + 0.00308641975308642*G0_0_2_0 + 0.00308641975308642*G0_0_2_2 + 0.00308641975308642*G0_0_2_3 + 0.00424382716049383*G0_0_3_0 + 0.00308641975308642*G0_0_3_2 + 0.00887345679012346*G0_0_3_3 + 0.00308641975308642*G0_2_0_0 + 0.00308641975308642*G0_2_0_2 + 0.00308641975308642*G0_2_0_3 + 0.00308641975308642*G0_2_2_0 + 0.00887345679012345*G0_2_2_2 + 0.00424382716049383*G0_2_2_3 + 0.00308641975308642*G0_2_3_0 + 0.00424382716049383*G0_2_3_2 + 0.00887345679012345*G0_2_3_3 + 0.00424382716049383*G0_3_0_0 + 0.00308641975308642*G0_3_0_2 + 0.00887345679012346*G0_3_0_3 + 0.00308641975308642*G0_3_2_0 + 0.00424382716049382*G0_3_2_2 + 0.00887345679012345*G0_3_2_3 + 0.00887345679012346*G0_3_3_0 + 0.00887345679012345*G0_3_3_2 + 0.033179012345679*G0_3_3_3;
      A[4] = 0.0331790123456791*G1_0_0_4 + 0.00887345679012346*G1_0_0_6 + 0.00887345679012346*G1_0_0_7 + 0.00887345679012346*G1_0_2_4 + 0.00424382716049383*G1_0_2_6 + 0.00308641975308642*G1_0_2_7 + 0.00887345679012346*G1_0_3_4 + 0.00308641975308642*G1_0_3_6 + 0.00424382716049383*G1_0_3_7 + 0.00887345679012346*G1_2_0_4 + 0.00424382716049383*G1_2_0_6 + 0.00308641975308642*G1_2_0_7 + 0.00424382716049383*G1_2_2_4 + 0.00887345679012346*G1_2_2_6 + 0.00308641975308642*G1_2_2_7 + 0.00308641975308642*G1_2_3_4 + 0.00308641975308642*G1_2_3_6 + 0.00308641975308642*G1_2_3_7 + 0.00887345679012346*G1_3_0_4 + 0.00308641975308642*G1_3_0_6 + 0.00424382716049383*G1_3_0_7 + 0.00308641975308642*G1_3_2_4 + 0.00308641975308642*G1_3_2_6 + 0.00308641975308642*G1_3_2_7 + 0.00424382716049383*G1_3_3_4 + 0.00308641975308642*G1_3_3_6 + 0.00887345679012345*G1_3_3_7;
      A[5] = 0.0;
      A[6] = 0.00887345679012346*G1_0_0_4 + 0.00424382716049383*G1_0_0_6 + 0.00308641975308642*G1_0_0_7 + 0.00424382716049383*G1_0_2_4 + 0.00887345679012346*G1_0_2_6 + 0.00308641975308642*G1_0_2_7 + 0.00308641975308642*G1_0_3_4 + 0.00308641975308642*G1_0_3_6 + 0.00308641975308642*G1_0_3_7 + 0.00424382716049383*G1_2_0_4 + 0.00887345679012346*G1_2_0_6 + 0.00308641975308642*G1_2_0_7 + 0.00887345679012346*G1_2_2_4 + 0.033179012345679*G1_2_2_6 + 0.00887345679012345*G1_2_2_7 + 0.00308641975308642*G1_2_3_4 + 0.00887345679012345*G1_2_3_6 + 0.00424382716049383*G1_2_3_7 + 0.00308641975308642*G1_3_0_4 + 0.00308641975308642*G1_3_0_6 + 0.00308641975308642*G1_3_0_7 + 0.00308641975308642*G1_3_2_4 + 0.00887345679012345*G1_3_2_6 + 0.00424382716049382*G1_3_2_7 + 0.00308641975308642*G1_3_3_4 + 0.00424382716049382*G1_3_3_6 + 0.00887345679012345*G1_3_3_7;
      A[7] = 0.00887345679012346*G1_0_0_4 + 0.00308641975308642*G1_0_0_6 + 0.00424382716049383*G1_0_0_7 + 0.00308641975308642*G1_0_2_4 + 0.00308641975308642*G1_0_2_6 + 0.00308641975308642*G1_0_2_7 + 0.00424382716049383*G1_0_3_4 + 0.00308641975308642*G1_0_3_6 + 0.00887345679012346*G1_0_3_7 + 0.00308641975308642*G1_2_0_4 + 0.00308641975308642*G1_2_0_6 + 0.00308641975308642*G1_2_0_7 + 0.00308641975308642*G1_2_2_4 + 0.00887345679012345*G1_2_2_6 + 0.00424382716049383*G1_2_2_7 + 0.00308641975308642*G1_2_3_4 + 0.00424382716049383*G1_2_3_6 + 0.00887345679012345*G1_2_3_7 + 0.00424382716049383*G1_3_0_4 + 0.00308641975308642*G1_3_0_6 + 0.00887345679012346*G1_3_0_7 + 0.00308641975308642*G1_3_2_4 + 0.00424382716049382*G1_3_2_6 + 0.00887345679012345*G1_3_2_7 + 0.00887345679012346*G1_3_3_4 + 0.00887345679012345*G1_3_3_6 + 0.033179012345679*G1_3_3_7;
        break;
      }
    case 2:
      {
        A[0] = 0.033179012345679*G0_0_0_0 + 0.00887345679012346*G0_0_0_1 + 0.00887345679012345*G0_0_0_3 + 0.00887345679012346*G0_0_1_0 + 0.00424382716049383*G0_0_1_1 + 0.00308641975308642*G0_0_1_3 + 0.00887345679012345*G0_0_3_0 + 0.00308641975308642*G0_0_3_1 + 0.00424382716049383*G0_0_3_3 + 0.00887345679012346*G0_1_0_0 + 0.00424382716049383*G0_1_0_1 + 0.00308641975308642*G0_1_0_3 + 0.00424382716049383*G0_1_1_0 + 0.00887345679012346*G0_1_1_1 + 0.00308641975308642*G0_1_1_3 + 0.00308641975308642*G0_1_3_0 + 0.00308641975308642*G0_1_3_1 + 0.00308641975308642*G0_1_3_3 + 0.00887345679012345*G0_3_0_0 + 0.00308641975308642*G0_3_0_1 + 0.00424382716049383*G0_3_0_3 + 0.00308641975308642*G0_3_1_0 + 0.00308641975308642*G0_3_1_1 + 0.00308641975308642*G0_3_1_3 + 0.00424382716049383*G0_3_3_0 + 0.00308641975308642*G0_3_3_1 + 0.00887345679012346*G0_3_3_3;
      A[1] = 0.00887345679012346*G0_0_0_0 + 0.00424382716049383*G0_0_0_1 + 0.00308641975308642*G0_0_0_3 + 0.00424382716049383*G0_0_1_0 + 0.00887345679012346*G0_0_1_1 + 0.00308641975308642*G0_0_1_3 + 0.00308641975308642*G0_0_3_0 + 0.00308641975308642*G0_0_3_1 + 0.00308641975308642*G0_0_3_3 + 0.00424382716049383*G0_1_0_0 + 0.00887345679012346*G0_1_0_1 + 0.00308641975308642*G0_1_0_3 + 0.00887345679012346*G0_1_1_0 + 0.033179012345679*G0_1_1_1 + 0.00887345679012345*G0_1_1_3 + 0.00308641975308642*G0_1_3_0 + 0.00887345679012345*G0_1_3_1 + 0.00424382716049382*G0_1_3_3 + 0.00308641975308642*G0_3_0_0 + 0.00308641975308642*G0_3_0_1 + 0.00308641975308642*G0_3_0_3 + 0.00308641975308642*G0_3_1_0 + 0.00887345679012345*G0_3_1_1 + 0.00424382716049382*G0_3_1_3 + 0.00308641975308642*G0_3_3_0 + 0.00424382716049382*G0_3_3_1 + 0.00887345679012345*G0_3_3_3;
      A[2] = 0.0;
      A[3] = 0.00887345679012345*G0_0_0_0 + 0.00308641975308642*G0_0_0_1 + 0.00424382716049383*G0_0_0_3 + 0.00308641975308642*G0_0_1_0 + 0.00308641975308642*G0_0_1_1 + 0.00308641975308642*G0_0_1_3 + 0.00424382716049383*G0_0_3_0 + 0.00308641975308642*G0_0_3_1 + 0.00887345679012346*G0_0_3_3 + 0.00308641975308642*G0_1_0_0 + 0.00308641975308642*G0_1_0_1 + 0.00308641975308642*G0_1_0_3 + 0.00308641975308642*G0_1_1_0 + 0.00887345679012345*G0_1_1_1 + 0.00424382716049382*G0_1_1_3 + 0.00308641975308642*G0_1_3_0 + 0.00424382716049382*G0_1_3_1 + 0.00887345679012345*G0_1_3_3 + 0.00424382716049383*G0_3_0_0 + 0.00308641975308642*G0_3_0_1 + 0.00887345679012346*G0_3_0_3 + 0.00308641975308642*G0_3_1_0 + 0.00424382716049382*G0_3_1_1 + 0.00887345679012345*G0_3_1_3 + 0.00887345679012346*G0_3_3_0 + 0.00887345679012345*G0_3_3_1 + 0.033179012345679*G0_3_3_3;
      A[4] = 0.033179012345679*G1_0_0_4 + 0.00887345679012346*G1_0_0_5 + 0.00887345679012345*G1_0_0_7 + 0.00887345679012346*G1_0_1_4 + 0.00424382716049383*G1_0_1_5 + 0.00308641975308642*G1_0_1_7 + 0.00887345679012345*G1_0_3_4 + 0.00308641975308642*G1_0_3_5 + 0.00424382716049383*G1_0_3_7 + 0.00887345679012346*G1_1_0_4 + 0.00424382716049383*G1_1_0_5 + 0.00308641975308642*G1_1_0_7 + 0.00424382716049383*G1_1_1_4 + 0.00887345679012346*G1_1_1_5 + 0.00308641975308642*G1_1_1_7 + 0.00308641975308642*G1_1_3_4 + 0.00308641975308642*G1_1_3_5 + 0.00308641975308642*G1_1_3_7 + 0.00887345679012345*G1_3_0_4 + 0.00308641975308642*G1_3_0_5 + 0.00424382716049383*G1_3_0_7 + 0.00308641975308642*G1_3_1_4 + 0.00308641975308642*G1_3_1_5 + 0.00308641975308642*G1_3_1_7 + 0.00424382716049383*G1_3_3_4 + 0.00308641975308642*G1_3_3_5 + 0.00887345679012346*G1_3_3_7;
      A[5] = 0.00887345679012346*G1_0_0_4 + 0.00424382716049383*G1_0_0_5 + 0.00308641975308642*G1_0_0_7 + 0.00424382716049383*G1_0_1_4 + 0.00887345679012346*G1_0_1_5 + 0.00308641975308642*G1_0_1_7 + 0.00308641975308642*G1_0_3_4 + 0.00308641975308642*G1_0_3_5 + 0.00308641975308642*G1_0_3_7 + 0.00424382716049383*G1_1_0_4 + 0.00887345679012346*G1_1_0_5 + 0.00308641975308642*G1_1_0_7 + 0.00887345679012346*G1_1_1_4 + 0.033179012345679*G1_1_1_5 + 0.00887345679012345*G1_1_1_7 + 0.00308641975308642*G1_1_3_4 + 0.00887345679012345*G1_1_3_5 + 0.00424382716049382*G1_1_3_7 + 0.00308641975308642*G1_3_0_4 + 0.00308641975308642*G1_3_0_5 + 0.00308641975308642*G1_3_0_7 + 0.00308641975308642*G1_3_1_4 + 0.00887345679012345*G1_3_1_5 + 0.00424382716049382*G1_3_1_7 + 0.00308641975308642*G1_3_3_4 + 0.00424382716049382*G1_3_3_5 + 0.00887345679012345*G1_3_3_7;
      A[6] = 0.0;
      A[7] = 0.00887345679012345*G1_0_0_4 + 0.00308641975308642*G1_0_0_5 + 0.00424382716049383*G1_0_0_7 + 0.00308641975308642*G1_0_1_4 + 0.00308641975308642*G1_0_1_5 + 0.00308641975308642*G1_0_1_7 + 0.00424382716049383*G1_0_3_4 + 0.00308641975308642*G1_0_3_5 + 0.00887345679012346*G1_0_3_7 + 0.00308641975308642*G1_1_0_4 + 0.00308641975308642*G1_1_0_5 + 0.00308641975308642*G1_1_0_7 + 0.00308641975308642*G1_1_1_4 + 0.00887345679012345*G1_1_1_5 + 0.00424382716049382*G1_1_1_7 + 0.00308641975308642*G1_1_3_4 + 0.00424382716049382*G1_1_3_5 + 0.00887345679012345*G1_1_3_7 + 0.00424382716049383*G1_3_0_4 + 0.00308641975308642*G1_3_0_5 + 0.00887345679012346*G1_3_0_7 + 0.00308641975308642*G1_3_1_4 + 0.00424382716049382*G1_3_1_5 + 0.00887345679012345*G1_3_1_7 + 0.00887345679012346*G1_3_3_4 + 0.00887345679012345*G1_3_3_5 + 0.033179012345679*G1_3_3_7;
        break;
      }
    case 3:
      {
        A[0] = 0.033179012345679*G0_0_0_0 + 0.00887345679012346*G0_0_0_1 + 0.00887345679012346*G0_0_0_2 + 0.00887345679012346*G0_0_1_0 + 0.00424382716049383*G0_0_1_1 + 0.00308641975308642*G0_0_1_2 + 0.00887345679012346*G0_0_2_0 + 0.00308641975308642*G0_0_2_1 + 0.00424382716049383*G0_0_2_2 + 0.00887345679012346*G0_1_0_0 + 0.00424382716049383*G0_1_0_1 + 0.00308641975308642*G0_1_0_2 + 0.00424382716049383*G0_1_1_0 + 0.00887345679012345*G0_1_1_1 + 0.00308641975308642*G0_1_1_2 + 0.00308641975308642*G0_1_2_0 + 0.00308641975308642*G0_1_2_1 + 0.00308641975308642*G0_1_2_2 + 0.00887345679012346*G0_2_0_0 + 0.00308641975308642*G0_2_0_1 + 0.00424382716049383*G0_2_0_2 + 0.00308641975308642*G0_2_1_0 + 0.00308641975308642*G0_2_1_1 + 0.00308641975308642*G0_2_1_2 + 0.00424382716049383*G0_2_2_0 + 0.00308641975308642*G0_2_2_1 + 0.00887345679012346*G0_2_2_2;
      A[1] = 0.00887345679012346*G0_0_0_0 + 0.00424382716049383*G0_0_0_1 + 0.00308641975308642*G0_0_0_2 + 0.00424382716049383*G0_0_1_0 + 0.00887345679012345*G0_0_1_1 + 0.00308641975308642*G0_0_1_2 + 0.00308641975308642*G0_0_2_0 + 0.00308641975308642*G0_0_2_1 + 0.00308641975308642*G0_0_2_2 + 0.00424382716049383*G0_1_0_0 + 0.00887345679012345*G0_1_0_1 + 0.00308641975308642*G0_1_0_2 + 0.00887345679012345*G0_1_1_0 + 0.033179012345679*G0_1_1_1 + 0.00887345679012345*G0_1_1_2 + 0.00308641975308642*G0_1_2_0 + 0.00887345679012345*G0_1_2_1 + 0.00424382716049382*G0_1_2_2 + 0.00308641975308642*G0_2_0_0 + 0.00308641975308642*G0_2_0_1 + 0.00308641975308642*G0_2_0_2 + 0.00308641975308642*G0_2_1_0 + 0.00887345679012345*G0_2_1_1 + 0.00424382716049382*G0_2_1_2 + 0.00308641975308642*G0_2_2_0 + 0.00424382716049382*G0_2_2_1 + 0.00887345679012345*G0_2_2_2;
      A[2] = 0.00887345679012346*G0_0_0_0 + 0.00308641975308642*G0_0_0_1 + 0.00424382716049383*G0_0_0_2 + 0.00308641975308642*G0_0_1_0 + 0.00308641975308642*G0_0_1_1 + 0.00308641975308642*G0_0_1_2 + 0.00424382716049383*G0_0_2_0 + 0.00308641975308642*G0_0_2_1 + 0.00887345679012346*G0_0_2_2 + 0.00308641975308642*G0_1_0_0 + 0.00308641975308642*G0_1_0_1 + 0.00308641975308642*G0_1_0_2 + 0.00308641975308642*G0_1_1_0 + 0.00887345679012345*G0_1_1_1 + 0.00424382716049382*G0_1_1_2 + 0.00308641975308642*G0_1_2_0 + 0.00424382716049382*G0_1_2_1 + 0.00887345679012345*G0_1_2_2 + 0.00424382716049383*G0_2_0_0 + 0.00308641975308642*G0_2_0_1 + 0.00887345679012346*G0_2_0_2 + 0.00308641975308642*G0_2_1_0 + 0.00424382716049382*G0_2_1_1 + 0.00887345679012345*G0_2_1_2 + 0.00887345679012346*G0_2_2_0 + 0.00887345679012345*G0_2_2_1 + 0.033179012345679*G0_2_2_2;
      A[3] = 0.0;
      A[4] = 0.033179012345679*G1_0_0_4 + 0.00887345679012346*G1_0_0_5 + 0.00887345679012346*G1_0_0_6 + 0.00887345679012346*G1_0_1_4 + 0.00424382716049383*G1_0_1_5 + 0.00308641975308642*G1_0_1_6 + 0.00887345679012346*G1_0_2_4 + 0.00308641975308642*G1_0_2_5 + 0.00424382716049383*G1_0_2_6 + 0.00887345679012346*G1_1_0_4 + 0.00424382716049383*G1_1_0_5 + 0.00308641975308642*G1_1_0_6 + 0.00424382716049383*G1_1_1_4 + 0.00887345679012345*G1_1_1_5 + 0.00308641975308642*G1_1_1_6 + 0.00308641975308642*G1_1_2_4 + 0.00308641975308642*G1_1_2_5 + 0.00308641975308642*G1_1_2_6 + 0.00887345679012346*G1_2_0_4 + 0.00308641975308642*G1_2_0_5 + 0.00424382716049383*G1_2_0_6 + 0.00308641975308642*G1_2_1_4 + 0.00308641975308642*G1_2_1_5 + 0.00308641975308642*G1_2_1_6 + 0.00424382716049383*G1_2_2_4 + 0.00308641975308642*G1_2_2_5 + 0.00887345679012346*G1_2_2_6;
      A[5] = 0.00887345679012346*G1_0_0_4 + 0.00424382716049383*G1_0_0_5 + 0.00308641975308642*G1_0_0_6 + 0.00424382716049383*G1_0_1_4 + 0.00887345679012345*G1_0_1_5 + 0.00308641975308642*G1_0_1_6 + 0.00308641975308642*G1_0_2_4 + 0.00308641975308642*G1_0_2_5 + 0.00308641975308642*G1_0_2_6 + 0.00424382716049383*G1_1_0_4 + 0.00887345679012345*G1_1_0_5 + 0.00308641975308642*G1_1_0_6 + 0.00887345679012345*G1_1_1_4 + 0.033179012345679*G1_1_1_5 + 0.00887345679012345*G1_1_1_6 + 0.00308641975308642*G1_1_2_4 + 0.00887345679012345*G1_1_2_5 + 0.00424382716049382*G1_1_2_6 + 0.00308641975308642*G1_2_0_4 + 0.00308641975308642*G1_2_0_5 + 0.00308641975308642*G1_2_0_6 + 0.00308641975308642*G1_2_1_4 + 0.00887345679012345*G1_2_1_5 + 0.00424382716049382*G1_2_1_6 + 0.00308641975308642*G1_2_2_4 + 0.00424382716049382*G1_2_2_5 + 0.00887345679012345*G1_2_2_6;
      A[6] = 0.00887345679012346*G1_0_0_4 + 0.00308641975308642*G1_0_0_5 + 0.00424382716049383*G1_0_0_6 + 0.00308641975308642*G1_0_1_4 + 0.00308641975308642*G1_0_1_5 + 0.00308641975308642*G1_0_1_6 + 0.00424382716049383*G1_0_2_4 + 0.00308641975308642*G1_0_2_5 + 0.00887345679012346*G1_0_2_6 + 0.00308641975308642*G1_1_0_4 + 0.00308641975308642*G1_1_0_5 + 0.00308641975308642*G1_1_0_6 + 0.00308641975308642*G1_1_1_4 + 0.00887345679012345*G1_1_1_5 + 0.00424382716049382*G1_1_1_6 + 0.00308641975308642*G1_1_2_4 + 0.00424382716049382*G1_1_2_5 + 0.00887345679012345*G1_1_2_6 + 0.00424382716049383*G1_2_0_4 + 0.00308641975308642*G1_2_0_5 + 0.00887345679012346*G1_2_0_6 + 0.00308641975308642*G1_2_1_4 + 0.00424382716049382*G1_2_1_5 + 0.00887345679012345*G1_2_1_6 + 0.00887345679012346*G1_2_2_4 + 0.00887345679012345*G1_2_2_5 + 0.033179012345679*G1_2_2_6;
      A[7] = 0.0;
        break;
      }
    }
    
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_6: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_6() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_6()
  {
    // Do nothing
  }

  /// Tabulate which form coefficients are used by this integral
  virtual const std::vector<bool> & enabled_coefficients() const
  {
    static const std::vector<bool> enabled({true, true, false, false, false, false, false});
    return enabled;
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (vertex_coordinates[3*v0 + 1]*vertex_coordinates[3*v1 + 2]  + vertex_coordinates[3*v0 + 2]*vertex_coordinates[3*v2 + 1]  + vertex_coordinates[3*v1 + 1]*vertex_coordinates[3*v2 + 2]) - (vertex_coordinates[3*v2 + 1]*vertex_coordinates[3*v1 + 2] + vertex_coordinates[3*v2 + 2]*vertex_coordinates[3*v0 + 1] + vertex_coordinates[3*v1 + 1]*vertex_coordinates[3*v0 + 2]);
    
    const double a1 = (vertex_coordinates[3*v0 + 2]*vertex_coordinates[3*v1 + 0]  + vertex_coordinates[3*v0 + 0]*vertex_coordinates[3*v2 + 2] + vertex_coordinates[3*v1 + 2]*vertex_coordinates[3*v2 + 0]) - (vertex_coordinates[3*v2 + 2]*vertex_coordinates[3*v1 + 0]  + vertex_coordinates[3*v2 + 0]*vertex_coordinates[3*v0 + 2] + vertex_coordinates[3*v1 + 2]*vertex_coordinates[3*v0 + 0]);
    
    const double a2 = (vertex_coordinates[3*v0 + 0]*vertex_coordinates[3*v1 + 1]  + vertex_coordinates[3*v0 + 1]*vertex_coordinates[3*v2 + 0]  + vertex_coordinates[3*v1 + 0]*vertex_coordinates[3*v2 + 1]) - (vertex_coordinates[3*v2 + 0]*vertex_coordinates[3*v1 + 1]  + vertex_coordinates[3*v2 + 1]*vertex_coordinates[3*v0 + 0]  + vertex_coordinates[3*v1 + 0]*vertex_coordinates[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet, vertex_coordinates);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet, vertex_coordinates);
    
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0[3][4] = \
    {{0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE0_f1[3][4] = \
    {{0.666666666666667, 0.0, 0.166666666666667, 0.166666666666667},
    {0.166666666666667, 0.0, 0.166666666666667, 0.666666666666667},
    {0.166666666666667, 0.0, 0.666666666666667, 0.166666666666667}};
    
    static const double FE0_f2[3][4] = \
    {{0.666666666666667, 0.166666666666667, 0.0, 0.166666666666667},
    {0.166666666666667, 0.166666666666667, 0.0, 0.666666666666667},
    {0.166666666666667, 0.666666666666667, 0.0, 0.166666666666667}};
    
    static const double FE0_f3[3][4] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0},
    {0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0},
    {0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0}};
    
    static const double FE2_f0_C0[3][8] = \
    {{0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f0_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE2_f1_C0[3][8] = \
    {{0.666666666666667, 0.0, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.0, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.0, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f1_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.0, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.0, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.0, 0.666666666666667, 0.166666666666667}};
    
    static const double FE2_f2_C0[3][8] = \
    {{0.666666666666667, 0.166666666666667, 0.0, 0.166666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.166666666666667, 0.0, 0.666666666666667, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.666666666666667, 0.0, 0.166666666666667, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f2_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.0, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.0, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.0, 0.166666666666667}};
    
    static const double FE2_f3_C0[3][8] = \
    {{0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE2_f3_C1[3][8] = \
    {{0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 8; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 336
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 336
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 16
        for (unsigned int r = 0; r < 4; r++)
        {
          F0 += FE0_f0[ip][r]*w[0][r];
          F1 += FE0_f0[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations for primary indices: 96
        for (unsigned int j = 0; j < 8; j++)
        {
          // Number of operations to compute entry: 12
          A[j] += ((FE2_f0_C0[ip][j] + FE2_f0_C1[ip][j]))*((8927.1*((F0 + (-1.0)*F1)) + 9810.0*F1)/((F0 + (-1.0)*F1)))*W3[ip]*det;
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 336
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 336
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 16
        for (unsigned int r = 0; r < 4; r++)
        {
          F0 += FE0_f1[ip][r]*w[0][r];
          F1 += FE0_f1[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations for primary indices: 96
        for (unsigned int j = 0; j < 8; j++)
        {
          // Number of operations to compute entry: 12
          A[j] += ((FE2_f1_C1[ip][j] + FE2_f1_C0[ip][j]))*((8927.1*((F0 + (-1.0)*F1)) + 9810.0*F1)/((F0 + (-1.0)*F1)))*W3[ip]*det;
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 336
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 336
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 16
        for (unsigned int r = 0; r < 4; r++)
        {
          F0 += FE0_f2[ip][r]*w[0][r];
          F1 += FE0_f2[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations for primary indices: 96
        for (unsigned int j = 0; j < 8; j++)
        {
          // Number of operations to compute entry: 12
          A[j] += ((FE2_f2_C1[ip][j] + FE2_f2_C0[ip][j]))*((8927.1*((F0 + (-1.0)*F1)) + 9810.0*F1)/((F0 + (-1.0)*F1)))*W3[ip]*det;
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 336
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 336
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 16
        for (unsigned int r = 0; r < 4; r++)
        {
          F0 += FE0_f3[ip][r]*w[0][r];
          F1 += FE0_f3[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations for primary indices: 96
        for (unsigned int j = 0; j < 8; j++)
        {
          // Number of operations to compute entry: 12
          A[j] += ((FE2_f3_C1[ip][j] + FE2_f3_C0[ip][j]))*((8927.1*((F0 + (-1.0)*F1)) + 9810.0*F1)/((F0 + (-1.0)*F1)))*W3[ip]*det;
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "c88c53d024a17c3e1c7eb1d40b34033b8a3fc55d7c13ba8c8ae4946795189ee6a2532a03d49abdc458a19689b4e6162611f76d4d4a99d17b71c3bfd2c914da94";
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 1;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 7;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 2;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 7;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return the number of custom domains
  virtual std::size_t num_custom_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Return whether the form has any custom integrals
  virtual bool has_custom_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    case 2:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    case 3:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    case 4:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    case 5:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    case 6:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_0();
        break;
      }
    case 7:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_finite_element_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    case 2:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    case 3:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    case 4:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    case 5:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    case 6:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_0();
        break;
      }
    case 7:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_dofmap_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_0();
        break;
      }
    case 1:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_1();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 3:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_3();
        break;
      }
    case 6:
      {
        return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_exterior_facet_integral_0_6();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new custom integral on sub domain i
  virtual ufc::custom_integral* create_custom_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return new ffc_form_8a7d3488086bd358bdad7f8c967ba3d91b4ad364_cell_integral_0_otherwise();
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

  /// Create a new custom integral on everywhere else
  virtual ufc::custom_integral* create_default_custom_integral() const
  {
    return 0;
  }

};

#endif
